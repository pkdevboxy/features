defaultTasks 'useFeature'

task noop {
}

subprojects {

    task useFeature {
        def readme = file('README.md')

        onlyIf {
            readme.exists()
        }

        doLast {
            readme.text = process(readme)
        }
    }
}

wrapper {
    // e.g.: `gradle wrapper -PlocalDistro=file:///path/to/gradle-<version>-bin.zip`
    if (project.hasProperty('localDistro')) {
        distributionUrl localDistro
    }
}

String process(File file) {
    def temp = tempFile(file)
    def writer = new PrintWriter(temp)
    def handlingCommand = false

    file.eachLine { line ->
        if (handlingCommand && !isCommandOutput(line)) {
            handlingCommand = false
            writer.println('')
        }
        if (!handlingCommand) {
            writer.println(line)
        }
        if (handlingCommand && isTotalTimeReport(line)) {
            writer.println(line)
        }
        if (isCommand(line)) {
            handlingCommand = true
            def command = stripCommandPrompt(line)
            def bashCommand = wrapCommandWithBash(command)
            def process = bashCommand.execute(null, file.getParentFile())
            def output = new StringBuffer()
            def skipDiffOutput = true
            process.waitForProcessOutput(output, output)
            new BufferedReader(new StringReader(output.toString())).with { reader ->
                def outputLine
                while ((outputLine = reader.readLine()) != null) {
                    if (isTotalTimeReport(outputLine) || isStartingNewDaemonReport(outputLine)) {
                        continue
                    }
                    if (isGitDiffCommand(command)) {
                        if (isFirstLineOfDiffContext(outputLine)) {
                            skipDiffOutput = false
                        }
                        if (skipDiffOutput) {
                            continue
                        }
                    }
                    if (isEmptyLine(outputLine)) {
                        writer.println('')
                    }
                    else if (containsFeaturesHome(outputLine)) {
                        writer.println("    ${stripFeaturesHome(outputLine)}")
                    }
                    else {
                        writer.println("    $outputLine")
                    }
                }
            }
        }
    }

    writer.close()
    return temp.text
}

File tempFile(File file) {
    File temp = File.createTempFile(file.name, '.tmp')
    temp.deleteOnExit()
    return temp
}

boolean isCommand(String line) {
    line.startsWith('    $ ')
}

List wrapCommandWithBash(String command) {
    ['bash', '-c', command]
}

String stripCommandPrompt(String line) {
    line.replace('    $ ', '')
}

boolean isCommandOutput(String line) {
    line =~ /^$/ || line =~ /^    /
}

boolean isTotalTimeReport(String line) {
    line =~ /Total time: /
}

boolean isStartingNewDaemonReport(String line) {
    line =~ /Starting a new Gradle Daemon for this build/
}

Float extractTotalTime(String line) {
    Float.valueOf(line.replace('Total time: ', '').replace(' secs', ''))
}

boolean isEmptyLine(String line) {
    line =~ /^$/ || line =~ /^ +$/
}

boolean containsFeaturesHome(String line) {
    line.contains("${rootProject.rootDir}")
}

String stripFeaturesHome(String line) {
    line.replaceAll("${rootProject.rootDir}", '\\$FEATURES_HOME')
}

boolean isGitDiffCommand(String command) {
    command.startsWith('git diff')
}

boolean isFirstLineOfDiffContext(String line) {
    line.startsWith('@@')
}
