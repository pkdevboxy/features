
subprojects {

    task readme {
        def readme = file('README.md')
        if (!readme.exists()) {
            throw new GradleException("$readme does not exist!")
        }

        doLast {
            println "--- STOPPING DAEMON ----"
            stopDaemon()
            println "--- PROCESSING ONCE ----"
            process(readme)
            println "--- PROCESSING TWICE ---"
            readme.text = process(readme)
        }
    }
}

void stopDaemon() {
    "$rootProject.rootDir/gradlew --stop".execute().waitFor()
}

String process(File file) {
    def temp = tempFile(file)
    def writer = new PrintWriter(temp)
    def handlingCommand = false
    def newTotalTimeReport = null

    file.eachLine { line ->
        if (handlingCommand && !isCommandOutput(line)) {
            handlingCommand = false
            writer.println('')
        }
        if (!handlingCommand) {
            writer.println(line)
        }
        if (handlingCommand && isTotalTimeReport(line) && newTotalTimeReport) {
            writer.println(marginTolerantTotalTimeReport(line, newTotalTimeReport))
        }
        if (isCommand(line)) {
            handlingCommand = true
            def command = extractCommand(line)
            def process = command.execute(null, file.getParentFile())
            def output = new StringBuilder()
            process.consumeProcessOutput(output, output)
            process.waitFor()
            new BufferedReader(new StringReader(output.toString())).with { reader ->
                def outputLine
                while ((outputLine = reader.readLine()) != null) {
                    if (isTotalTimeReport(outputLine)) {
                        newTotalTimeReport = outputLine
                    }
                    else if (isEmptyLine(outputLine)) {
                        writer.println('')
                    }
                    else {
                        writer.println("    $outputLine")
                    }
                }
            }
        }
    }

    writer.close()
    return temp.text
}

File tempFile(File file) {
    File temp = File.createTempFile(file.name, '.tmp')
    temp.deleteOnExit()
    return temp
}

boolean isCommand(String line) {
    line.startsWith('    $ ')
}

def extractCommand(String line) {
    def command = line.replace('    $ ', '')
    return ['bash', '-c', command]
}

boolean isCommandOutput(String line) {
    line =~ /^$/ || line =~ /^    /
}

boolean isTotalTimeReport(String line) {
    line =~ /Total time: /
}

Float extractTotalTime(String line) {
    Float.valueOf(line.replace('Total time: ', '').replace(' secs', ''))
}

boolean isEmptyLine(String line) {
    line =~ /^$/ || line =~ /^ +$/
}

String marginTolerantTotalTimeReport(String line, String newTotalTimeReport) {
    float oldTotalTime = extractTotalTime(line)
    float newTotalTime = extractTotalTime(newTotalTimeReport)
    float margin = oldTotalTime * 0.50
    float lowerMargin = oldTotalTime - margin
    float upperMargin = oldTotalTime + margin
    if (newTotalTime <= lowerMargin || newTotalTime >= upperMargin) {
        return "    $newTotalTimeReport"
    }
    return "$line"
}
